/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.ufjf.dcc025.encorecrossover.eengine;

import br.ufjf.dcc025.encorecrossover.echar.EChar;
import br.ufjf.dcc025.encorecrossover.edata.EData;
import br.ufjf.dcc025.encorecrossover.eskill.ESkill;
import br.ufjf.dcc025.encorecrossover.euser.EAdmin;
import br.ufjf.dcc025.encorecrossover.euser.EPlayer;
import br.ufjf.dcc025.encorecrossover.euser.EUser;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author b4bru
 */
public class EScreen extends javax.swing.JFrame {

    /**
     * Creates new form EScreen
     */
    public EScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        layeredPane = new javax.swing.JLayeredPane();
        skillPane = new javax.swing.JPanel();
        skillCharNamePane = new javax.swing.JPanel();
        charNameTextField = new javax.swing.JTextField();
        skillSplitPane = new javax.swing.JSplitPane();
        skillListPane = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        skillList = new javax.swing.JList<>();
        skillStatPane = new javax.swing.JPanel();
        skillNameLabel = new javax.swing.JLabel();
        skillNameTextField = new javax.swing.JTextField();
        skillTypeLabel = new javax.swing.JLabel();
        skillTypeComboBox = new javax.swing.JComboBox<>();
        skillValueLabel = new javax.swing.JLabel();
        skillValueSpinner = new javax.swing.JSpinner();
        skillCooldownLabel = new javax.swing.JLabel();
        skillCooldownSpinner = new javax.swing.JSpinner();
        skillStatEffectLabel = new javax.swing.JLabel();
        skillEffectComboBox = new javax.swing.JComboBox<>();
        skillDurationLabel = new javax.swing.JLabel();
        skillDurationSpinner = new javax.swing.JSpinner();
        skillToolBar = new javax.swing.JToolBar();
        newSkillButton = new javax.swing.JButton();
        saveSkillButton = new javax.swing.JButton();
        removeSkillButton = new javax.swing.JButton();
        confirmChangeButton = new javax.swing.JButton();
        discardChangeButton = new javax.swing.JButton();
        characterPane = new javax.swing.JPanel();
        characterToolBar = new javax.swing.JToolBar();
        favCharButton = new javax.swing.JButton();
        editCharButton = new javax.swing.JButton();
        createCharButton = new javax.swing.JButton();
        removeCharButton = new javax.swing.JButton();
        backToUserButton = new javax.swing.JButton();
        charSplitPane = new javax.swing.JSplitPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        characterList = new javax.swing.JList<>();
        jScrollPane12 = new javax.swing.JScrollPane();
        characterTextArea = new javax.swing.JTextArea();
        gamePane = new javax.swing.JPanel();
        inGameActionPanel = new javax.swing.JPanel();
        actionLabel = new javax.swing.JLabel();
        actionComboBox = new javax.swing.JComboBox<>();
        targetLabel = new javax.swing.JLabel();
        targetComboBox = new javax.swing.JComboBox<>();
        executeButton = new javax.swing.JButton();
        inGameStatsPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        inGameCharTextArea1 = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        selectedActionTextArea = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        inGameCharTextArea2 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        turnSummaryTextArea = new javax.swing.JTextArea();
        userPane = new javax.swing.JPanel();
        userTabbedPane = new javax.swing.JTabbedPane();
        userCharPanel = new javax.swing.JPanel();
        favCharSplitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        favCharList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedCharTextArea = new javax.swing.JTextArea();
        charListToolBar = new javax.swing.JToolBar();
        newGameButton = new javax.swing.JButton();
        addCharButton = new javax.swing.JButton();
        removeCharacterButton = new javax.swing.JButton();
        userHistoryPanel = new javax.swing.JPanel();
        historyToolBar = new javax.swing.JToolBar();
        historyConfirmButton = new javax.swing.JButton();
        historyRemoveButton = new javax.swing.JButton();
        historySplitPane = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        historyList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        historyTextArea = new javax.swing.JTextArea();
        loginPane = new javax.swing.JPanel();
        loginPaneLabel = new javax.swing.JLabel();
        loginInnerPanel = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        userMenu = new javax.swing.JMenu();
        editNameMenuItem = new javax.swing.JMenuItem();
        logoutMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jButton3.setText("jButton3");

        jButton6.setText("jButton6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encore Crossover");
        setBackground(new java.awt.Color(51, 51, 51));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setPreferredSize(new java.awt.Dimension(640, 480));
        setSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        layeredPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Made by BeeHive", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.ABOVE_BOTTOM, new java.awt.Font("Segoe Script", 1, 10))); // NOI18N
        layeredPane.setMaximumSize(null);
        layeredPane.setPreferredSize(null);
        //Post-Init Code start(BeeHive)
        loginPane.setVisible(true);
        userPane.setVisible(false);
        gamePane.setVisible(false);
        characterPane.setVisible(false);  
        skillPane.setVisible(false);
        //Post-Init Code end(BeeHive)
        layeredPane.setLayout(new javax.swing.OverlayLayout(layeredPane));

        skillPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Skills"));
        skillPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                skillPaneComponentShown(evt);
            }
        });
        skillPane.setLayout(new java.awt.BorderLayout());

        skillCharNamePane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Character Name"));
        skillCharNamePane.setLayout(new javax.swing.BoxLayout(skillCharNamePane, javax.swing.BoxLayout.LINE_AXIS));

        charNameTextField.setText("jTextField1");
        skillCharNamePane.add(charNameTextField);

        skillPane.add(skillCharNamePane, java.awt.BorderLayout.PAGE_START);

        skillSplitPane.setDividerLocation(200);

        skillListPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Skill List"));
        skillListPane.setPreferredSize(new java.awt.Dimension(200, 264));
        skillListPane.setLayout(new javax.swing.BoxLayout(skillListPane, javax.swing.BoxLayout.LINE_AXIS));

        skillList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        skillList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                skillListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(skillList);

        skillListPane.add(jScrollPane9);

        skillSplitPane.setLeftComponent(skillListPane);

        skillStatPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Skill Stats"));
        skillStatPane.setLayout(new java.awt.GridLayout(6, 2));

        skillNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        skillNameLabel.setText("Name: ");
        skillStatPane.add(skillNameLabel);
        skillStatPane.add(skillNameTextField);

        skillTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        skillTypeLabel.setText("Type: ");
        skillStatPane.add(skillTypeLabel);

        skillTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Damage Skill", "Healing Skill", "Effect Skill" }));
        skillStatPane.add(skillTypeComboBox);

        skillValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        skillValueLabel.setText("Value: ");
        skillStatPane.add(skillValueLabel);
        skillStatPane.add(skillValueSpinner);

        skillCooldownLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        skillCooldownLabel.setText("Cooldown: ");
        skillStatPane.add(skillCooldownLabel);
        skillStatPane.add(skillCooldownSpinner);

        skillStatEffectLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        skillStatEffectLabel.setText("Effect: ");
        skillStatPane.add(skillStatEffectLabel);

        skillEffectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        skillStatPane.add(skillEffectComboBox);

        skillDurationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        skillDurationLabel.setText("Duration: ");
        skillStatPane.add(skillDurationLabel);
        skillStatPane.add(skillDurationSpinner);

        skillSplitPane.setRightComponent(skillStatPane);

        skillPane.add(skillSplitPane, java.awt.BorderLayout.CENTER);

        skillToolBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Options"));
        skillToolBar.setRollover(true);

        newSkillButton.setText("New Skill");
        newSkillButton.setFocusable(false);
        newSkillButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newSkillButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        skillToolBar.add(newSkillButton);

        saveSkillButton.setText("Save Skill");
        saveSkillButton.setFocusable(false);
        saveSkillButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveSkillButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        skillToolBar.add(saveSkillButton);

        removeSkillButton.setText("Remove Skill");
        removeSkillButton.setFocusable(false);
        removeSkillButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeSkillButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        skillToolBar.add(removeSkillButton);

        confirmChangeButton.setText("Confirm Changes");
        confirmChangeButton.setFocusable(false);
        confirmChangeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        confirmChangeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        skillToolBar.add(confirmChangeButton);

        discardChangeButton.setText("Discard Changes");
        discardChangeButton.setFocusable(false);
        discardChangeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        discardChangeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        discardChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardChangeButtonActionPerformed(evt);
            }
        });
        skillToolBar.add(discardChangeButton);

        skillPane.add(skillToolBar, java.awt.BorderLayout.PAGE_END);

        layeredPane.add(skillPane);

        characterPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Characters", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        characterPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                characterPaneComponentShown(evt);
            }
        });
        characterPane.setLayout(new java.awt.BorderLayout());

        characterToolBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Options", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        characterToolBar.setRollover(true);

        favCharButton.setText("Add to Favorite");
        favCharButton.setFocusable(false);
        favCharButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        favCharButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        favCharButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favCharButtonActionPerformed(evt);
            }
        });
        characterToolBar.add(favCharButton);

        editCharButton.setText("Edit Character");
        editCharButton.setFocusable(false);
        editCharButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editCharButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editCharButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCharButtonActionPerformed(evt);
            }
        });
        characterToolBar.add(editCharButton);

        createCharButton.setText("Create Character");
        createCharButton.setFocusable(false);
        createCharButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createCharButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createCharButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCharButtonActionPerformed(evt);
            }
        });
        characterToolBar.add(createCharButton);

        removeCharButton.setText("Remove Character");
        removeCharButton.setFocusable(false);
        removeCharButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeCharButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeCharButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCharButtonActionPerformed(evt);
            }
        });
        characterToolBar.add(removeCharButton);

        backToUserButton.setText("Back");
        backToUserButton.setFocusable(false);
        backToUserButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backToUserButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backToUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToUserButtonActionPerformed(evt);
            }
        });
        characterToolBar.add(backToUserButton);

        characterPane.add(characterToolBar, java.awt.BorderLayout.PAGE_END);

        charSplitPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Characters"));

        characterList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Character 1", "Character 2", "Character 3", "Character 4", "Character 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        characterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        characterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                characterListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(characterList);

        charSplitPane.setLeftComponent(jScrollPane11);

        characterTextArea.setEditable(false);
        characterTextArea.setColumns(20);
        characterTextArea.setLineWrap(true);
        characterTextArea.setRows(5);
        jScrollPane12.setViewportView(characterTextArea);

        charSplitPane.setRightComponent(jScrollPane12);

        characterPane.add(charSplitPane, java.awt.BorderLayout.CENTER);

        layeredPane.add(characterPane);

        gamePane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Game", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        gamePane.setLayout(new java.awt.BorderLayout());

        inGameActionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Action"));
        inGameActionPanel.setLayout(new javax.swing.BoxLayout(inGameActionPanel, javax.swing.BoxLayout.LINE_AXIS));

        actionLabel.setText("Action:");
        inGameActionPanel.add(actionLabel);

        actionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        actionComboBox.setSelectedItem(null);
        actionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                actionComboBoxItemStateChanged(evt);
            }
        });
        inGameActionPanel.add(actionComboBox);

        targetLabel.setText("Target:");
        inGameActionPanel.add(targetLabel);

        targetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enemy", "Self" }));
        inGameActionPanel.add(targetComboBox);

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });
        inGameActionPanel.add(executeButton);

        gamePane.add(inGameActionPanel, java.awt.BorderLayout.PAGE_END);

        inGameStatsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Current Status"));
        inGameStatsPanel.setLayout(new javax.swing.BoxLayout(inGameStatsPanel, javax.swing.BoxLayout.LINE_AXIS));

        inGameCharTextArea1.setEditable(false);
        inGameCharTextArea1.setColumns(20);
        inGameCharTextArea1.setLineWrap(true);
        inGameCharTextArea1.setRows(5);
        inGameCharTextArea1.setText("Character 1\nHP: xx/xx\nEffects: effectx, effecty, effectz");
        jScrollPane5.setViewportView(inGameCharTextArea1);

        inGameStatsPanel.add(jScrollPane5);

        selectedActionTextArea.setEditable(false);
        selectedActionTextArea.setColumns(20);
        selectedActionTextArea.setLineWrap(true);
        selectedActionTextArea.setRows(5);
        selectedActionTextArea.setText("Selected Action's Description\n");
        jScrollPane8.setViewportView(selectedActionTextArea);

        inGameStatsPanel.add(jScrollPane8);

        inGameCharTextArea2.setEditable(false);
        inGameCharTextArea2.setColumns(20);
        inGameCharTextArea2.setLineWrap(true);
        inGameCharTextArea2.setRows(5);
        inGameCharTextArea2.setText("Character 2\nHP: xx/xx\nEffects: effectx, effecty, effectz");
        jScrollPane6.setViewportView(inGameCharTextArea2);

        inGameStatsPanel.add(jScrollPane6);

        gamePane.add(inGameStatsPanel, java.awt.BorderLayout.CENTER);

        turnSummaryTextArea.setEditable(false);
        turnSummaryTextArea.setColumns(20);
        turnSummaryTextArea.setLineWrap(true);
        turnSummaryTextArea.setRows(5);
        turnSummaryTextArea.setText("Fulano takes x damage from effectx\nFulano uses Skill1 on Ciclano\nCiclano takes x damage\nCiclano takes x damage from effectx\nCiclano uses Skill 2 on Ciclano\nCiclano heals x HP");
        jScrollPane7.setViewportView(turnSummaryTextArea);

        gamePane.add(jScrollPane7, java.awt.BorderLayout.PAGE_START);

        layeredPane.add(gamePane);

        userPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "User", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        userPane.setForeground(new java.awt.Color(102, 102, 102));
        userPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                userPaneComponentShown(evt);
            }
        });
        userPane.setLayout(new javax.swing.BoxLayout(userPane, javax.swing.BoxLayout.LINE_AXIS));

        userCharPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "pane"));
        userCharPanel.setLayout(new java.awt.BorderLayout());

        favCharSplitPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Favorite Characters"));
        favCharSplitPane.setDividerLocation(150);

        favCharList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Character 1", "Character 2", "Character 3", "Character 4", "Character 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        favCharList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        favCharList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                favCharListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(favCharList);

        favCharSplitPane.setLeftComponent(jScrollPane1);

        selectedCharTextArea.setEditable(false);
        selectedCharTextArea.setColumns(20);
        selectedCharTextArea.setLineWrap(true);
        selectedCharTextArea.setRows(5);
        jScrollPane2.setViewportView(selectedCharTextArea);

        favCharSplitPane.setRightComponent(jScrollPane2);

        userCharPanel.add(favCharSplitPane, java.awt.BorderLayout.CENTER);

        charListToolBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Options"));
        charListToolBar.setRollover(true);

        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });
        charListToolBar.add(newGameButton);

        addCharButton.setText("Add Character");
        addCharButton.setFocusable(false);
        addCharButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addCharButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addCharButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCharButtonActionPerformed(evt);
            }
        });
        charListToolBar.add(addCharButton);

        removeCharacterButton.setText("Remove Character");
        removeCharacterButton.setFocusable(false);
        removeCharacterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeCharacterButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeCharacterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCharacterButtonActionPerformed(evt);
            }
        });
        charListToolBar.add(removeCharacterButton);

        userCharPanel.add(charListToolBar, java.awt.BorderLayout.PAGE_END);

        userTabbedPane.addTab("New Game", userCharPanel);

        userHistoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "pane"));
        userHistoryPanel.setLayout(new java.awt.BorderLayout());

        historyToolBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Options"));
        historyToolBar.setRollover(true);

        historyConfirmButton.setText("Confirm");
        historyConfirmButton.setFocusable(false);
        historyConfirmButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        historyConfirmButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        historyConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyConfirmButtonActionPerformed(evt);
            }
        });
        historyToolBar.add(historyConfirmButton);

        historyRemoveButton.setText("Remove");
        historyRemoveButton.setFocusable(false);
        historyRemoveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        historyRemoveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        historyRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyRemoveButtonActionPerformed(evt);
            }
        });
        historyToolBar.add(historyRemoveButton);

        userHistoryPanel.add(historyToolBar, java.awt.BorderLayout.PAGE_END);

        historySplitPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Entries"));
        historySplitPane.setDividerLocation(150);

        historyList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "History 1", "History 2", "History 3", "History 4", "History 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        historyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                historyListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(historyList);

        historySplitPane.setLeftComponent(jScrollPane3);

        historyTextArea.setEditable(false);
        historyTextArea.setColumns(20);
        historyTextArea.setLineWrap(true);
        historyTextArea.setRows(5);
        jScrollPane4.setViewportView(historyTextArea);

        historySplitPane.setRightComponent(jScrollPane4);

        userHistoryPanel.add(historySplitPane, java.awt.BorderLayout.CENTER);

        userTabbedPane.addTab("History", userHistoryPanel);

        userPane.add(userTabbedPane);

        layeredPane.add(userPane);

        loginPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Login", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        loginPane.setLayout(new java.awt.BorderLayout());

        loginPaneLabel.setFont(new java.awt.Font("Unispace", 1, 48)); // NOI18N
        loginPaneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginPaneLabel.setText("Encore Crossover");
        loginPane.add(loginPaneLabel, java.awt.BorderLayout.CENTER);

        loginInnerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        loginInnerPanel.setLayout(new javax.swing.BoxLayout(loginInnerPanel, javax.swing.BoxLayout.LINE_AXIS));

        usernameLabel.setText("Username:");
        loginInnerPanel.add(usernameLabel);

        usernameField.setText("Username");
        usernameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameFieldFocusGained(evt);
            }
        });
        loginInnerPanel.add(usernameField);

        passwordLabel.setText("Password:");
        loginInnerPanel.add(passwordLabel);

        passwordField.setText("Password");
        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFieldFocusGained(evt);
            }
        });
        loginInnerPanel.add(passwordField);

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginInnerPanel.add(loginButton);

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        loginInnerPanel.add(createButton);

        loginPane.add(loginInnerPanel, java.awt.BorderLayout.PAGE_END);

        layeredPane.add(loginPane);

        userMenu.setText("User");

        editNameMenuItem.setText("Change Username");
        editNameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editNameMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(editNameMenuItem);

        logoutMenuItem.setText("LogOut");
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(logoutMenuItem);

        jMenuBar1.add(userMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        user = EUser.login(usernameField.getText(), passwordField.getText());
        if(user != null){
            JOptionPane.showMessageDialog(loginPane, "Login successful.", "Login", 1);
            loginPane.setVisible(false);
            layeredPane.setLayer(loginPane, layeredPane.lowestLayer());
            userPane.setVisible(true);
        }
        else
            JOptionPane.showMessageDialog(loginPane, "Login failed.", "Login", 0);
    }//GEN-LAST:event_loginButtonActionPerformed

    private void usernameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFieldFocusGained
        // TODO add your handling code here:
        usernameField.selectAll();
    }//GEN-LAST:event_usernameFieldFocusGained

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
        user = EPlayer.create(usernameField.getText(), passwordField.getText());
        if(user != null){
            JOptionPane.showMessageDialog(loginPane, "New user created succesfully.", "Login", 1);
            loginPane.setVisible(false);
            layeredPane.setLayer(loginPane, layeredPane.lowestLayer());
            userPane.setVisible(true);
        }
        else
            JOptionPane.showMessageDialog(loginPane, "Username in use.", "Login Failed", 0);
    }//GEN-LAST:event_createButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        EData.exportData();
    }//GEN-LAST:event_formWindowClosing

    private void userPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_userPaneComponentShown
        // TODO add your handling code here:
        if(user.getClass() == EAdmin.class)
            historyConfirmButton.setEnabled(true);
        else
            historyConfirmButton.setEnabled(false);
        List<String> list = new ArrayList<>();
        list.addAll(user.getFavList());
        String charList[]= new String[list.size()];
        for(int i = 0; i < list.size(); i++){
            charList[i] = list.get(i);
        }
        favCharList.setListData(charList);
        List<String[]> list2 = new ArrayList<>();
        list2.addAll(user.listHistory());
        String histList[] = new String[list2.size()];
        for(int i = 0; i < list2.size(); i++)
            histList[i] = list2.get(i)[0];
        historyList.setListData(histList);
    }//GEN-LAST:event_userPaneComponentShown

    private void favCharListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_favCharListValueChanged
        // TODO add your handling code here:
        if(favCharList.getSelectedValue() == null){
            selectedCharTextArea.setText("");
            return;
        }
        String cName = favCharList.getSelectedValue();
        selectedCharTextArea.setText(EChar.get(cName).getProfile());
    }//GEN-LAST:event_favCharListValueChanged

    private void editNameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editNameMenuItemActionPerformed
        // TODO add your handling code here:
        String newName = JOptionPane.showInputDialog(
                layeredPane, "Insert new username:",
                "User", 3);
        if(user.setName(newName))
            JOptionPane.showMessageDialog(
                    layeredPane, "Username changed successfully.",
                    "User", 1);
        else
            JOptionPane.showMessageDialog(
                    layeredPane, "Username change failed.",
                    "User", 0);
    }//GEN-LAST:event_editNameMenuItemActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        // TODO add your handling code here:
        if(favCharList.getSelectedValue() != null){
            fight = EFight.pve(user, favCharList.getSelectedValue());
            fight.start();
            inGameCharTextArea1.setText(fight.getChar1());
            inGameCharTextArea2.setText(fight.getChar2());
            actionComboBox.removeAllItems();
            for(String s : fight.getActionList())
                actionComboBox.addItem(s);
            actionComboBox.setSelectedIndex(0);
            selectedActionTextArea.setText(ESkill.get(actionComboBox.getItemAt(actionComboBox.getSelectedIndex())).getDescription());
            turnSummaryTextArea.setText("Start Fight!");
            userPane.setVisible(false);
            layeredPane.setLayer(gamePane, layeredPane.highestLayer());
            gamePane.setVisible(true);
        }
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void removeCharacterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCharacterButtonActionPerformed
        // TODO add your handling code here:
        if(favCharList.getSelectedValue() != null){
            if(JOptionPane.showConfirmDialog(layeredPane, "Remove Character from List?", "Remove", 0) == 1)
                return;
            String name = favCharList.getSelectedValue();
            user.removeFavChar(name);
            userPaneComponentShown(null);
        }
    }//GEN-LAST:event_removeCharacterButtonActionPerformed

    private void passwordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusGained
        // TODO add your handling code here:
        passwordField.selectAll();
    }//GEN-LAST:event_passwordFieldFocusGained

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        // TODO add your handling code here:
        String action = actionComboBox.getItemAt(actionComboBox.getSelectedIndex());
        String target = targetComboBox.getItemAt(targetComboBox.getSelectedIndex());
        turnSummaryTextArea.setText(fight.turn(target, action));
        inGameCharTextArea1.setText(fight.getChar1());
        actionComboBox.removeAllItems();
        for(String s : fight.getActionList())
            actionComboBox.addItem(s);
        inGameCharTextArea2.setText(fight.getChar2());
        actionComboBox.setSelectedIndex(0);
        selectedActionTextArea.setText(ESkill.get(actionComboBox.getItemAt(actionComboBox.getSelectedIndex())).getDescription());
        if(fight.end()){
            JOptionPane.showMessageDialog(layeredPane, "Fight Ended.", "Encore", 1);
            gamePane.setVisible(false);
            layeredPane.setLayer(userPane, layeredPane.highestLayer());
            userPane.setVisible(true);
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void actionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_actionComboBoxItemStateChanged
        // TODO add your handling code here:
        String action = actionComboBox.getItemAt(actionComboBox.getSelectedIndex());
        if(action != null)
            selectedActionTextArea.setText(ESkill.get(action).getDescription());
        else
            selectedActionTextArea.setText("Choose Action");
    }//GEN-LAST:event_actionComboBoxItemStateChanged

    private void historyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_historyListValueChanged
        // TODO add your handling code here:
        if(historyList.getSelectedValue() == null){
            historyTextArea.setText("");
            return;
        }
        String hist = user.getHistory(historyList.getSelectedIndex());
        historyTextArea.setText(hist);
    }//GEN-LAST:event_historyListValueChanged

    private void historyRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyRemoveButtonActionPerformed
        // TODO add your handling code here:
        if(historyList.getSelectedValue() != null){
            if(JOptionPane.showConfirmDialog(
                    layeredPane, "Remove history from List?",
                    "Remove", 0) == 1)
                return;
            user.removeHistory(historyList.getSelectedIndex());
            userPaneComponentShown(null);
        }
    }//GEN-LAST:event_historyRemoveButtonActionPerformed

    private void historyConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyConfirmButtonActionPerformed
        // TODO add your handling code here:
        user.confirmRequest(user.getHistory(historyList.getSelectedIndex()));
    }//GEN-LAST:event_historyConfirmButtonActionPerformed

    private void editCharButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCharButtonActionPerformed
        // TODO add your handling code here:
        if(characterList.getSelectedValue() != null){
            String name = characterList.getSelectedValue();
            charNameTextField.setText(name);
            
            List<String> skills = EChar.get(name).getSkillList();
            String listData[] = new String[skills.size()];
            for(int i = 0; i < skills.size(); i++){
                listData[i] = skills.get(i);
            }
            skillList.setListData(listData);
            
            characterPane.setVisible(false);
            skillPane.setVisible(true);
        }
    }//GEN-LAST:event_editCharButtonActionPerformed

    private void characterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_characterListValueChanged
        // TODO add your handling code here:
        if(characterList.getSelectedValue() == null){
            characterTextArea.setText("");
            return;
        }
        String cName = characterList.getSelectedValue();
        characterTextArea.setText(EChar.get(cName).getProfile());
    }//GEN-LAST:event_characterListValueChanged

    private void characterPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_characterPaneComponentShown
        // TODO add your handling code here:
        List<String> list = new ArrayList<>();
        list.addAll(EChar.getCharList());
        String charList[]= new String[list.size()];
        for(int i = 0; i < list.size(); i++){
            charList[i] = list.get(i);
        }
        characterList.setListData(charList);
    }//GEN-LAST:event_characterPaneComponentShown

    private void addCharButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCharButtonActionPerformed
        // TODO add your handling code here:
        userPane.setVisible(false);
        characterPane.setVisible(true);
        
    }//GEN-LAST:event_addCharButtonActionPerformed

    private void backToUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToUserButtonActionPerformed
        // TODO add your handling code here:
        userPane.setVisible(true);
        characterPane.setVisible(false);
    }//GEN-LAST:event_backToUserButtonActionPerformed

    private void favCharButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favCharButtonActionPerformed
        // TODO add your handling code here:
        if(user.getClass() != EAdmin.class && characterList.getSelectedValue() != null){
            user.addFavChar(characterList.getSelectedValue());
            userPane.setVisible(true);
            characterPane.setVisible(false);
        }
    }//GEN-LAST:event_favCharButtonActionPerformed

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        // TODO add your handling code here:
        user = null;
        JOptionPane.showMessageDialog(layeredPane, "Logged out successfully.", "Logout", 1);
        userPane.setVisible(false);
        loginPane.setVisible(true);
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    private void removeCharButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCharButtonActionPerformed
        // TODO add your handling code here:
        if(characterList.getSelectedValue() != null){
            String request[] = new String[3];
            request[0] = "Request";
            request[1] = "Remove";
            request[2] = characterList.getSelectedValue();
            user.sendRequest(request);
            String message = "Character removal request sent to admin.";
            JOptionPane.showMessageDialog(layeredPane, message, "Character", 1);
        }
    }//GEN-LAST:event_removeCharButtonActionPerformed

    private void createCharButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCharButtonActionPerformed
        // TODO add your handling code here:
        charNameTextField.setText("");
        
        String listData[] = new String[1];
        listData[0] = "";
        skillList.setListData(listData);
        
        characterPane.setVisible(false);
        skillPane.setVisible(true);
    }//GEN-LAST:event_createCharButtonActionPerformed

    private void skillListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_skillListValueChanged
        // TODO add your handling code here:
        if(skillList.getSelectedValue() != null){
            String name = skillList.getSelectedValue();
            skillNameTextField.setText(ESkill.get(name).getName());
            
            String type = ESkill.get(name).getClass().toString();
            if(type.contains("DMG")){
                skillTypeComboBox.setSelectedItem("Damage Skill");
            }
            else if(type.contains("Heal")){
                skillTypeComboBox.setSelectedItem("Healing Skill");
            }
            else if(type.contains("Effect")){
                skillTypeComboBox.setSelectedItem("Effect Skill");
            }
            
            skillValueSpinner.setValue(ESkill.get(name).getValue());
            
            skillCooldownSpinner.setValue(ESkill.get(name).getCooldown());
            
            if(type.contains("Effect")){
                skillEffectComboBox.setEnabled(true);
                //skillEffectComboBox.setSelectedItem(e);
                skillDurationSpinner.setEnabled(true);
                //skillDurationSpinner.setValue(d);
            }
            else{
                skillEffectComboBox.setEnabled(false);
                skillDurationSpinner.setEnabled(false);
            }
        }
    }//GEN-LAST:event_skillListValueChanged

    private void discardChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardChangeButtonActionPerformed
        // TODO add your handling code here:
        characterPane.setVisible(true);
        skillPane.setVisible(false);
    }//GEN-LAST:event_discardChangeButtonActionPerformed

    private void skillPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_skillPaneComponentShown
        // TODO add your handling code here:
        skillNameTextField.setText("");
        skillTypeComboBox.setSelectedItem("");
        skillValueSpinner.setValue(0);
        skillCooldownSpinner.setValue(0);
        skillEffectComboBox.setSelectedItem("");
        skillDurationSpinner.setValue("");
        
    }//GEN-LAST:event_skillPaneComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EScreen().setVisible(true);
            }
        });
    }
    //BeeHive
    private EUser user;
    private EFight fight;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JComboBox<String> actionComboBox;
    private javax.swing.JLabel actionLabel;
    private javax.swing.JButton addCharButton;
    private javax.swing.JButton backToUserButton;
    private javax.swing.JToolBar charListToolBar;
    private javax.swing.JTextField charNameTextField;
    private javax.swing.JSplitPane charSplitPane;
    private javax.swing.JList<String> characterList;
    private javax.swing.JPanel characterPane;
    private javax.swing.JTextArea characterTextArea;
    private javax.swing.JToolBar characterToolBar;
    private javax.swing.JButton confirmChangeButton;
    private javax.swing.JButton createButton;
    private javax.swing.JButton createCharButton;
    private javax.swing.JButton discardChangeButton;
    private javax.swing.JButton editCharButton;
    private javax.swing.JMenuItem editNameMenuItem;
    private javax.swing.JButton executeButton;
    private javax.swing.JButton favCharButton;
    private javax.swing.JList<String> favCharList;
    private javax.swing.JSplitPane favCharSplitPane;
    private javax.swing.JPanel gamePane;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JButton historyConfirmButton;
    private javax.swing.JList<String> historyList;
    private javax.swing.JButton historyRemoveButton;
    private javax.swing.JSplitPane historySplitPane;
    private javax.swing.JTextArea historyTextArea;
    private javax.swing.JToolBar historyToolBar;
    private javax.swing.JPanel inGameActionPanel;
    private javax.swing.JTextArea inGameCharTextArea1;
    private javax.swing.JTextArea inGameCharTextArea2;
    private javax.swing.JPanel inGameStatsPanel;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel loginInnerPanel;
    private javax.swing.JPanel loginPane;
    private javax.swing.JLabel loginPaneLabel;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton newSkillButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton removeCharButton;
    private javax.swing.JButton removeCharacterButton;
    private javax.swing.JButton removeSkillButton;
    private javax.swing.JButton saveSkillButton;
    private javax.swing.JTextArea selectedActionTextArea;
    private javax.swing.JTextArea selectedCharTextArea;
    private javax.swing.JPanel skillCharNamePane;
    private javax.swing.JLabel skillCooldownLabel;
    private javax.swing.JSpinner skillCooldownSpinner;
    private javax.swing.JLabel skillDurationLabel;
    private javax.swing.JSpinner skillDurationSpinner;
    private javax.swing.JComboBox<String> skillEffectComboBox;
    private javax.swing.JList<String> skillList;
    private javax.swing.JPanel skillListPane;
    private javax.swing.JLabel skillNameLabel;
    private javax.swing.JTextField skillNameTextField;
    private javax.swing.JPanel skillPane;
    private javax.swing.JSplitPane skillSplitPane;
    private javax.swing.JLabel skillStatEffectLabel;
    private javax.swing.JPanel skillStatPane;
    private javax.swing.JToolBar skillToolBar;
    private javax.swing.JComboBox<String> skillTypeComboBox;
    private javax.swing.JLabel skillTypeLabel;
    private javax.swing.JLabel skillValueLabel;
    private javax.swing.JSpinner skillValueSpinner;
    private javax.swing.JComboBox<String> targetComboBox;
    private javax.swing.JLabel targetLabel;
    private javax.swing.JTextArea turnSummaryTextArea;
    private javax.swing.JPanel userCharPanel;
    private javax.swing.JPanel userHistoryPanel;
    private javax.swing.JMenu userMenu;
    private javax.swing.JPanel userPane;
    private javax.swing.JTabbedPane userTabbedPane;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
